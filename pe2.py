# 2

# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the
# first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the
# even-valued terms.

# to see runtime of a program, in terminal type: time python Desktop/py_programs/pe/pe2.py


def rfib(n):
    """
    RECURSIVE
    :param n: number of terms in fibonacci sequence to go up to
    :return: n-th term of fibonacci sequence
    """
    if n <= 1:
        return 1
    else:
        return int(rfib(n-1) + rfib(n-2))


def ifib(n):
    """
    ITERATIVE
    :param n: number of terms in fibonacci sequence to go up to
    :return: n-th term of fibonacci sequence
    """
    i = 0
    a, b = 0, 1
    while i <= n:
        a, b = b, a+b
        i += 1
    return a


x = input('Which function would you like to use? Enter "i" for iterative or "r" for recursive: ')
if x == 'i':
    fib = ifib
elif x == 'r':
    fib = rfib

i = 2
sum = 0
while fib(i) < 4000000:
    if fib(i) % 2 == 0:
        sum += fib(i)
    i += 3

print(sum)
